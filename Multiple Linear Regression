Practical: Implementing Multiple Linear Regression for House Price Prediction using scikit-learn


# Import Required Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Create a Sample Dataset
data = {
    'Square_Feet': [750, 800, 850, 900, 950, 1000, 1100, 1200, 1300, 1400],
    'Bedrooms': [1, 2, 2, 2, 3, 3, 3, 4, 4, 4],
    'Price': [150000, 160000, 165000, 170000, 175000, 185000, 195000, 210000, 220000, 230000]
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Define Features (X) and Target Variable (Y)
X = df[['Square_Feet', 'Bedrooms']]  # Input Variables
Y = df['Price']  # Target Variable

# Split Data into Training (80%) and Testing (20%) sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Initialize the Linear Regression Model
model = LinearRegression()

# Train the model with training data
model.fit(X_train, Y_train)

# Display Intercept and Coefficients
print("Intercept:", model.intercept_)
print("Coefficients:", model.coef_)

# Predict house prices on the test dataset
Y_pred = model.predict(X_test)

# Print Predictions vs Actual Values
predictions_df = pd.DataFrame({'Actual Price': Y_test, 'Predicted Price': Y_pred})
print(predictions_df)

# Calculate Error Metrics
mae = mean_absolute_error(Y_test, Y_pred)
mse = mean_squared_error(Y_test, Y_pred)
rmse = np.sqrt(mse)

print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")

# Scatter Plot for Actual vs Predicted Prices
plt.scatter(Y_test, Y_pred, color='blue')
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted House Prices")
plt.show()
