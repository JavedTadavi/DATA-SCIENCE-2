Practical: Implementing and Evaluating Support Vector Machine (SVM) Classifier

# Import necessary libraries
import pandas as pd
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Load the Iris dataset
iris = datasets.load_iris()

# Convert the dataset into a DataFrame for better understanding
data = pd.DataFrame(iris.data, columns=iris.feature_names)
data['species'] = iris.target  # Add target labels

# Display the first few rows of the dataset
print("First 5 rows of the dataset:")
print(data.head())

# Split data into features (X) and target labels (y)
X = data.drop('species', axis=1)  # Features
y = data['species']                # Labels

# Split data into training (70%) and testing (30%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Create and train the SVM model with a linear kernel
svm_model = SVC(kernel='linear')
svm_model.fit(X_train, y_train)

# Predict on the test data
y_pred = svm_model.predict(X_test)

# Evaluate model performance
accuracy = accuracy_score(y_test, y_pred)
print(f"\nAccuracy: {accuracy:.2f}")

print("\nClassification Report:")
print(classification_report(y_test, y_pred))
